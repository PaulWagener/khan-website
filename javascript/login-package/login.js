/**
 * Various utilities related to the login page.
 */

// TODO(benkomalo): do more on-the-fly client side validation of things like
// valid usernames or passwords

// Namespace
var Login = Login || {};

/**
 * Entry point - usually called on DOMready.
 */
Login.initLoginPage = function() {
    $("#login-facebook").click(function(e) {
        Login.connectWithFacebook();
    });

    if ($("#identifier").val()) {
        // Email/username filled in from previous attempt.
        $("#password").focus();
    } else {
        $("#identifier").focus();
    }

    $("#submit-button").click(function(e) {
        e.preventDefault();
        if (!Login.submitDisabled_) {
            Login.loginWithPassword();
        }
    });
    $("#password").on("keypress", function(e) {
        if (e.keyCode === $.ui.keyCode.ENTER) {
            e.preventDefault();
            if (!Login.submitDisabled_) {
                Login.loginWithPassword();
            }
        }
    });
};

/**
 * Use Facebook's JS SDK to connect with Facebook.
 */
Login.connectWithFacebook = function(continueUrl) {
    FacebookUtil.runOnFbReady(function() {
        // TODO(benkomalo): add some visual indicator that we're trying.
        FB.login(function(response) {
            if (response) {
                FacebookUtil.fixMissingCookie(response);
            }

            if (response["status"] === "connected") {
                FacebookUtil.markUsingFbLogin();
                var url = continueUrl || "/";
                if (url.indexOf("?") > -1) {
                    url += "&fb=1";
                } else {
                    url += "?fb=1";
                }

                window.location = url;
            } else {
                // TODO(benkomalo): handle - the user didn't login properly in facebook.
            }
       });
    });
};

/**
 * Login with a username and password.
 */
Login.loginWithPassword = function() {
    // Hide any previous failed login notification after any other attempt.
    // Use "visibility" so as to avoid any jerks in the layout.
    $("#login-fail-message").css("visiblity", "hidden");

    // Pre-validate.
    var valid = Login.ensureValid_("#identifier", "Email or username required");
    valid = Login.ensureValid_("#password", "Password required") && valid;

    if (valid) {
        Login.disableSubmit_();
        Login.asyncFormPost(
                $("#login-form"),
                function(data) {
                    // Server responded with 200, but login may have failed.
                    if (data["errors"]) {
                        Login.onPasswordLoginFail(data["errors"]);
                        Login.enableSubmit_();
                    } else {
                        Login.onPasswordLoginSuccess(data);
                        // Don't re-enable the login button as we're about
                        // to refresh the page.
                    }
                },
                function(data) {
                    // Hard failure - server is inaccessible or having issues
                    // TODO(benkomalo): handle
                    Login.enableSubmit_();
                });
    }
};

Login.submitDisabled_ = false;

/**
 * Disables form submit on a login attempt, to prevent duplicate tries.
 */
Login.disableSubmit_ = function() {
    $("#submit-button").attr("disabled", true);
    Login.submitDisabled_ = true;
};

/**
 * Restores form submission ability, usually after a response from a server
 * from a login/signup attempt.
 */
Login.enableSubmit_ = function() {
    $("#submit-button").removeAttr("disabled");
    Login.submitDisabled_ = false;
};

/**
 * Handle a failed attempt at logging in with a username/password.
 */
Login.onPasswordLoginFail = function(errors) {
    var text;
    if (errors["badlogin"]) {
        text = "Username and password doesn't match";
    } else {
        // Unexpected error. This shouldn't really happen but
        // just in case...
        text = "Error logging in. Please try again";
    }

    $("#login-fail-message").text(text).css("visibility", "");
    $("#password").focus();
};

/**
 * Handle a successful login response, which includes auth data.
 * This will cause the page to fully reload to a /postlogin URL
 * generated by the server containing the new auth token which will be
 * set as a cookie.
 */
Login.onPasswordLoginSuccess = function(data) {
    var auth = data["auth"];
    var continueUri = data["continue"] || "/";
    window.location.replace(
            "/postlogin?continue=" + encodeURIComponent(continueUri) +
            "&auth=" + encodeURIComponent(auth));
};

/**
 * Validates a field in the login form and displays an error on failure.
 */
Login.ensureValid_ = function(selector, errorText, checkFunc) {
    // By default - check that it's not just empty whitespace.
    checkFunc = checkFunc || function() {
        var value = $(selector).val();
        return !!$.trim(value);
    };
    if (!checkFunc()) {
        $(selector + "-error").text(errorText);
        return false;
    }

    $(selector + "-error").text("");
    return true;
};


// TODO(benkomalo): work on a proper iframe-based transport. This is a very
//     crude implementation that will cause browser history entries on each
//     form post, which is probably not entirely desirable.

/**
 * Submits a form in the background via a hidden iframe.
 * Only one form may be in flight at a time, since only a single iframe
 * is used.
 *
 * This is useful so that the page doesn't have to navigate away and we can
 * handle errors more gracefully.
 *
 * Note that this is quite crude and makes no guarantees about history
 * state (on most browsers, each request will likely create a history entry).
 */
Login.asyncFormPost = function(jelForm, success, error) {
    if (Login.requestInFlight_) {
        return;
    }

    Login.requestInFlight_ = {
        success: success,
        error: error
    };

    var iframeName = "async-form-iframe";
    if (!Login.iframeForPost_) {
        // Note: some browsers may not load a completely hidden frame, so we
        // make sure it has some dimension and use visibility:hidden and
        // negative margins to minimize its impact to layout.
        Login.iframeForPost_ = $("<iframe></iframe>")
            .attr("name", iframeName)
            .attr("id", iframeName)
            .attr("src", "javascript:''")
            .attr("style",
                    "visibility: hidden;" +
                    "width: 1px; height: 1px;" +
                    "margin-top: -1px; margin-left: -1px;")
            .appendTo(document.body)
            .on("load", Login.handleAsyncFormLoad_);
    }

    jelForm.prop("target", iframeName);
    jelForm.submit();
};

/**
 * The hidden iframe used to post a form in the background.
 */
Login.iframeForPost_ = null;

/**
 * An object with 'success' and 'error' callbacks (error being optional)
 * for the current request in flight.
 */
Login.requestInFlight_ = null;

/**
 * Internal callback for when an iframe finishes loading.
 */
Login.handleAsyncFormLoad_ = function(e) {
    var frame = e.target;

    var doc;
    if ($.browser.webkit) {
        doc = frame.document || frame.contentWindow.document;
    } else {
        doc = frame.contentDocument || frame.contentWindow.document;
    }
    var result;
    var success = true;
    try {
        // There may be reasons why we can't access the content (e.g. it
        // doesn't exist or we're not allowed), such as in IE's default 404
        var rawContent = doc.body.textContent || doc.body.innerText;

        // TODO(benkomalo): support other content types.
        // The content is expected to be JSON in all uses of this so far.
        result = $.parseJSON(rawContent);
    } catch (ex) {
        success = false;
    }
    try {
        if (success) {
            Login.requestInFlight_.success(result);
        } else if (Login.requestInFlight_.error) {
            Login.requestInFlight_.error();
        }
    } finally {
        // The callbacks may throw or error out but it's important we
        // clean up the state.
        Login.requestInFlight_ = null;
    }
};

